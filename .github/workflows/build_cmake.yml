name: CMake Build for Doxygen

on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC Debug", 
            os: windows-latest,
            build_type: "Debug", cc: "cl", cxx: "cl",
            build_gen: "NMake Makefiles"
          }
    steps:
    - uses: actions/checkout@v1
      
    - name: Download MikTex (Windows)
      run: |
        $wc = New-Object System.Net.WebClient;
        $maxAttempts=5;
        $attemptCount=0;
        Do {
          $attemptCount++;
          Try {
            $wc.DownloadFile("https://ctan.math.illinois.edu/systems/win32/miktex/setup/windows-x64/miktexsetup-4.0-x64.zip","miktexsetup-4.0-x64.zip")
          } Catch [Exception] {
            Write-Host $_.Exception | format-list -force
          }
        } while (((Test-Path "miktexsetup-x64.zip") -eq $false) -and ($attemptCount -le $maxAttempts))  
      shell: pwsh
      if: matrix.config.os == 'windows-latest'
      
    - uses: suisei-cn/actions-download-file@v1
      with: 
        url: "https://github.com/pffang/libiconv-for-Windows/releases/download/v1.16/libiconv-for-Windows_1.16.7z"
        target: .  
      if: matrix.config.os == 'windows-latest'

    - name: Extract MikTex zip (Windows)
      shell: bash
      run: |
        unzip miktexsetup-4.0-x64.zip
      if: matrix.config.os == 'windows-latest'

    - name: Download MikTex packages (Windows)
      shell: bash
      run: |
        ./miktexsetup --verbose \
                      --local-package-repository=C:/miktex-repository \
                      --remote-package-repository="https://ctan.math.illinois.edu/systems/win32/miktex/tm/packages/" \
                      --package-set=essential \
                      download
      if: matrix.config.os == 'windows-latest'

    - name: Install MikTex packages (Windows)
      shell: bash
      run: |
        ./miktexsetup --local-package-repository=C:/miktex-repository \
                      --package-set=essential \
                      --shared \
                      install
      if: matrix.config.os == 'windows-latest'

    - name: Setting MikTex paths (Windows)
      shell: bash
      run: |
        echo "C:/Program Files/MiKTeX/miktex/bin/x64/" >> $GITHUB_PATH
        export PATH="/c/Program Files/MiKTeX/miktex/bin/x64/:$PATH"
        
        echo "Configuring MiKTeX to install missing packages on the fly"
        initexmf --admin --verbose --set-config-value='[MPM]AutoInstall=1'
      if: matrix.config.os == 'windows-latest'

    - name: Install Ghostscript (Windows)
      run:
        choco install ghostscript
      if: matrix.config.os == 'windows-latest'
      
    - name: Setting Ghostscript paths (Windows)
      shell: bash
      run: |
        echo "C:/Program Files (x86)/gs/gs9.53/bin/" >> $GITHUB_PATH;
        echo "C:/Program Files/gs/gs9.53/bin/" >> $GITHUB_PATH;
        export PATH="/c/Program Files (x86)/gs/gs9.53/bin/:$PATH";
        export PATH="/c/Program Files/gs/gs9.53/bin/:$PATH";
      if: matrix.config.os == 'windows-latest'
        
    - name: Install bison/flex (Windows)
      run:
        choco install winflexbison
      if: matrix.config.os == 'windows-latest'

    - name: Install Graphviz (Windows)
      run:
        choco install graphviz
      if: matrix.config.os == 'windows-latest'


    - name: Setup VS Environment (Windows)
      uses: seanmiddleditch/gha-setup-vsdevenv@master
      if: matrix.config.os == 'windows-latest'

    - name: Refresh Env (Windows)
      run:
        refreshenv
      if: matrix.config.os == 'windows-latest'
    
    - name: Check tool versions (Windows)
      shell: bash
      run: |
        echo "=== perl ===";
        perl --version;
        echo "=== python ===";
        python --version;
        echo "=== cmake ===";
        cmake --version;
        echo "=== latex ===";
        latex --version;
        echo "=== bibtex ===";
        bibtex --version
        echo "=== bison ===";
        win_bison --version;
        echo "=== flex ===";
        win_flex --version;
        echo "=== dot ===";
        dot -V;
        echo "=== ghostscript ===";
        echo "=== ghostscript 64 bit ===";
        gswin64c --version;
        echo "=== ghostscript 32 bit ===";
        gswin32c --version;
      if: matrix.config.os == 'windows-latest'

